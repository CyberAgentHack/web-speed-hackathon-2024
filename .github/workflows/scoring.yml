name: Scoring

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  issues: write

jobs:
  comment:
    runs-on: ubuntu-latest
    outputs:
      comment-id: ${{ steps.comment.outputs.comment-id }}
    steps:
      - name: Comment
        id: comment
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0

        with:
          issue-number: ${{ vars.SCORING_ISSUE_NUMBER }}
          body: |
            ## レギュレーションチェック

            :hourglass_flowing_sand: **VRT を実行しています**

            ---

            Actions: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  vrt:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.result.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Setup
        uses: ./.github/actions/setup

      - name: Install playwright
        run: pnpm --filter "@wsh-2024/testing" exec playwright install chromium --with-deps

      - name: Test
        run: pnpm run test || exit 0
        env:
          E2E_BASE_URL: ${{ secrets.APPLICATION_URL }}
          PLAYWRIGHT_JSON_OUTPUT_NAME: result.json

      - name: Read result
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: result
        with:
          result-encoding: json
          script: |
            const payload = require('./workspaces/testing/result.json');
            const collect = suites => {
              return suites.flatMap(suite => {
                return [...suite.specs, ...collect(suite.suites || [])];
              });
            };
            const errors = collect(payload.suites).filter(spec => !spec.ok);
            return {
              errors: errors.map(error => error.title),
              status: 0 < errors.length ? 'failure' : 'success',
            };

      - name: Upload result
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ fromJSON(steps.result.outputs.result).status == 'failure' }}
        with:
          name: test-result
          path: ./workspaces/testing/result.json
          retention-days: 1

  comment-vrt:
    runs-on: ubuntu-latest
    needs:
      - comment
      - vrt
    steps:
      - name: Comment
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        with:
          comment-id: ${{ needs.comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            ## レギュレーションチェック

            ${{ (fromJSON(needs.vrt.outputs.result).status == 'success' && '**不具合はありませんでした**') || '**一部のページに不具合があります**' }}

            <details>
            <summary>不具合が見つかったテスト名</summary>

            ```json
            ${{ toJSON(fromJSON(needs.vrt.outputs.result).errors) }}
            ```

            </details>

            ## スコア

            :hourglass_flowing_sand: **Lighthouse でスコアを計測しています**

            ---

            Actions: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  comment-vrt-failure:
    runs-on: ubuntu-latest
    needs:
      - comment
      - vrt
    if: always() && needs.vrt.result == 'failure'
    steps:
      - name: Comment
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        with:
          comment-id: ${{ needs.comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            ## レギュレーションチェック

            :exclamation: **テストの実行に失敗しました**

            次を確認してください

            - URL が間違っていませんか
            - API `POST /api/initialize` が実行できますか
            - 計測対象のページは、誰でも閲覧できるようになっていますか
            - エラーページ以外では、ステータスコードが 200 で返却されますか

            ---

            Actions: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  scoring:
    runs-on: ubuntu-latest
    needs:
      - vrt
    outputs:
      result: ${{ steps.result.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Setup
        uses: ./.github/actions/setup

      - name: Install puppeteer
        run: pnpm --filter "@wsh-2024/scoring" exec puppeteer browsers install chrome

      - name: Scoring
        id: scoring
        run: pnpm run scoring --url ${APPLICATION_URL} --out ./result.json
        env:
          APPLICATION_URL: ${{ secrets.APPLICATION_URL }}

      - name: Read result
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: result
        with:
          result-encoding: json
          script: |
            const payload = require('./workspaces/scoring/result.json');

            const head = `
            | テスト項目 | スコア |
            |-------|-----|
            `.trim();
            const scores = payload.results.reduce((previous, result) => {
              if (result.type === 'success') {
                return previous + `\n| ${result.name} | ${result.score} |`;
              }
              return previous + `\n| ${result.name} | 計測できません |`;
            }, head);

            const total = `**合計 ${payload.total} / ${payload.max}**`;

            const failures = payload.results
              .filter(result => result.type === 'failure')
              .map(result => ({ name: result.name, reason: result.reason }));

            return {
              scores,
              total,
              failures,
              status: 0 < failures.length ? 'failure' : 'success',
            };

      - name: Upload result
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: ${{ fromJSON(steps.result.outputs.result).status == 'failure' }}
        with:
          name: scoring-result
          path: ./workspaces/scoring/result.json
          retention-days: 1

  comment-scoring:
    runs-on: ubuntu-latest
    needs:
      - comment
      - comment-vrt
      - scoring
      - vrt
    steps:
      - name: Comment
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        with:
          comment-id: ${{ needs.comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            ## レギュレーションチェック

            ${{ (fromJSON(needs.vrt.outputs.result).status == 'success' && '**不具合はありませんでした**') || '**一部のページに不具合があります**' }}

            <details>
            <summary>不具合が見つかったテスト名</summary>

            ```json
            ${{ toJSON(fromJSON(needs.vrt.outputs.result).errors) }}
            ```

            </details>

            ## スコア

            ${{ fromJSON(needs.scoring.outputs.result).scores }}

            ${{ fromJSON(needs.scoring.outputs.result).total }}

            <details>
            <summary>計測できなかった原因</summary>

            ```json
            ${{ toJSON(fromJSON(needs.scoring.outputs.result).failures) }}
            ```

            </details>

            ---

            Actions: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  comment-scoring-failure:
    runs-on: ubuntu-latest
    needs:
      - comment
      - comment-vrt
      - scoring
      - vrt
    if: always() && needs.scoring.result == 'failure'
    steps:
      - name: Comment
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        with:
          comment-id: ${{ needs.comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            ## レギュレーションチェック

            ${{ (fromJSON(needs.vrt.outputs.result).status == 'success' && '**不具合はありませんでした**') || '**一部のページに不具合があります**' }}

            <details>
            <summary>不具合が見つかったテスト名</summary>

            ```json
            ${{ toJSON(fromJSON(needs.vrt.outputs.result).errors) }}
            ```

            </details>

            ## スコア

            :exclamation: **Lighthouse の計測ができませんでした**

            次を確認してください

            - URL が間違っていませんか
            - 計測対象のページは、誰でも閲覧できるようになっていますか
            - エラーページ以外では、ステータスコードが 200 で返却されますか

            ---

            Actions: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
